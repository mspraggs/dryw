class Error {
    #[constructor]
    fn new(self, context) {
        self.context = context;
    }
}

class RuntimeError < Error {}

class AttributeError < RuntimeError {}

class IndexError < RuntimeError {}

class ImportError < RuntimeError {}

class NameError < RuntimeError {}

class TypeError < RuntimeError {}

class ValueError < RuntimeError {}

class StopIter < Error {
    #[constructor]
    fn new(self) {
        super.new(nil);
    }
}

class Iter {
    fn iter(self) {
        return self;
    }

    fn map(self, f) {
        return MapIter.new(self.iter(), f);
    }

    fn collect(self) {
        var ret = [];
        for v in self {
            ret.push(v);
        }
        return ret;
    }

    fn filter(self, pred) {
        return FilterIter.new(self.iter(), pred);
    }

    fn reduce(self, func, init) {
        var ret = init;
        for v in self {
            ret = func(ret, v);
        }
        return ret;
    }
}

class MapIter < Iter {
    #[constructor]
    fn new(self, iterable, func) {
        self.iterable = iterable;
        self.func = func;
    }

    fn iter(self) {
        return self;
    }

    fn next(self) {
        var next = self.iterable.next();
        if next.is_a(StopIter) {
            return next;
        }
        return self.func(next);
    }
}

class FilterIter < Iter {
    #[constructor]
    fn new(self, iterable, predicate) {
        self.iterable = iterable;
        self.predicate = predicate;
    }

    fn iter(self) {
        return self;
    }

    fn next(self) {
        var next = self.iterable.next();
        while !next.is_a(StopIter) and !self.predicate(next) {
            next = self.iterable.next();
        }
        return next;
    }
}
